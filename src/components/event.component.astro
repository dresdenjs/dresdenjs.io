---
import type { MarkdownInstance } from 'astro';
import dayjs from 'dayjs';

export interface Props {
  event: MarkdownInstance<Record<string, any>>;
}
const { event } = Astro.props;
const { frontmatter, compiledContent } = event;
const { date, location } = frontmatter;

const formatted = dayjs(date).format('L');
const teaser = compiledContent().replaceAll(/<[^>]*>/g, '');
---

<style lang="scss">
  article {
    position: relative;
    display: flex;
    flex-direction: row;
    align-items: center;
    
    &::before {
      flex: 0 0 auto;
      content: '';
      display: block;
      height: 3px;
      width: 3px;
      margin-right: 11px;
      border: 3px solid var(--ddjs-color-primary);
    }
  }
  
  a {
    padding: 8px;
    background-color: var(--ddjs-color-white);
    text-decoration: none;
    color: inherit;

    &::before,
    &::after {
      content: '';
      position: absolute;
      left: 3px;
      height: calc(50% + 1px);
      width: 3px;
      background-color: var(--ddjs-color-primary);
    }

    &::before {
      bottom: calc(50% + 7px);

      article:first-of-type & {
        height: calc(50% + 9px);
      }
    }
    
    &::after {
      top: calc(50% + 8px);

      article:last-of-type & {
        display: none;
      }
    }
  }

  .meta {
    display: flex;
    flex-direction: row;

    font-size: 13px;
    font-weight: 600;

    color: var(--ddjs-color-primary-typo);

    address {
      font-style: normal;
    }
  }

  h2 {
    margin: 0;

    font-size: 20px;
    line-height: 25px;
  }

  p {
    display: -webkit-box;
    margin: 0;

    font-size: 13px;
    line-height: 17px;

    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }
</style>

<article>
  <a href="">
    <div class="meta">
      <time datetime={date}>{formatted}</time>
      <address>{location}</address>
    </div>
    <h2>{frontmatter.title}</h2>
    {teaser !== '' && <p>{teaser}</p>}
  </a>
</article>
