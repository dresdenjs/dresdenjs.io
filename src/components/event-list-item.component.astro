---
import type { MarkdownInstance } from 'astro';
import EventListItemHeader from './event-list-item-header.component.astro';
import EventListItemContent from './event-list-item-content.component.astro';

export interface Props {
  event: MarkdownInstance<Record<string, any>>;
  faded: boolean;
}
const { event, faded, hidden } = Astro.props;
const { frontmatter, compiledContent } = event;
const { date, location, title } = frontmatter;
---

<style lang="scss">
  @use '../styles/utils';

  article {
    --ddjs-event-list-item-border-size: 3px;

    position: relative;
    display: flex;
    flex-direction: row;
    align-items: center;

    &[hidden] {
      display: none;
    }

    &::before {
      flex: 0 0 auto;
      content: '';
      display: block;
      height: var(--ddjs-event-list-item-border-size);
      width: var(--ddjs-event-list-item-border-size);
      margin-right: calc(
        #{utils.size(2)} - var(--ddjs-event-list-item-border-size)
      );
      border: var(--ddjs-event-list-item-border-size) solid
        var(--ddjs-color-primary);
    }

    &[data-faded]::before {
      border-color: var(--ddjs-color-primary-faded);
    }
  }

  a {
    padding: utils.size(1);
    background-color: var(--ddjs-color-white);
    text-decoration: none;
    color: inherit;

    article[data-faded] & {
      color: var(--ddjs-color-grey-medium);
    }

    &::before,
    &::after {
      content: '';
      position: absolute;
      left: var(--ddjs-event-list-item-border-size);
      height: calc(50% + 1px);
      width: var(--ddjs-event-list-item-border-size);
      background-color: var(--ddjs-color-primary);

      article[data-faded] & {
        background-color: var(--ddjs-color-primary-faded);
      }
    }

    &::before {
      bottom: calc(50% + #{utils.size(1)} - 1px);

      article:not([hidden]):first-of-type & {
        height: calc(50% + #{utils.size(1)} + 1px);
      }

      // smooth gradient for all faded items
      article[data-faded]:not([hidden]) & {
        background: linear-gradient(
          to bottom,
          var(--ddjs-color-primary) 0%,
          var(--ddjs-color-primary-faded) 100%
        );
      }

      // reset smooth gradient of all follow up faded items
      // to limit the transition to the first matching one
      article[data-faded]:not([hidden]) ~ article[data-faded]:not([hidden]) & {
        background: var(--ddjs-color-primary-faded);
      }
    }

    &::after {
      top: calc(50% + #{utils.size(1)});

      article:not([hidden]):last-of-type & {
        display: none;
      }
    }
  }
</style>

<article data-faded={faded} hidden={hidden}>
  <a href="">
    <EventListItemHeader {...{date, location}} />
    <EventListItemContent {...{title, content: compiledContent()}} />
  </a>
</article>
