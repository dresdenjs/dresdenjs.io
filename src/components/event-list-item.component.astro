---
import type { MeetupEvent } from '../types';
import { getEventSlug } from '../utils/event.utils';

import EventListItemHeader from './event-list-item-header.component.astro';
import EventListItemContent from './event-list-item-content.component.astro';

type Props = {
  faded?: boolean;
  first?: boolean;
  last?: boolean;
  hidden?: boolean;
} & (
  | {
      event: MeetupEvent;
      now?: false;
    }
  | {
      now: true;
    }
);
const { event = {}, faded = false, first = false, last = false, hidden = false, now = false } = Astro.props;
const { date, location, title } = event.frontmatter ?? {};
---

<style lang="scss">
  @use '../styles/utils';

  article {
    --ddjs-event-list-item-border-size: 3px;

    position: relative;
    display: flex;
    flex-direction: row;
    align-items: center;

    &[hidden] {
      display: none;
    }

    &::before {
      flex: 0 0 auto;
      content: '';
      display: block;
      height: var(--ddjs-event-list-item-border-size);
      width: var(--ddjs-event-list-item-border-size);
      margin-right: calc(#{utils.size(2)} - var(--ddjs-event-list-item-border-size));
      border: var(--ddjs-event-list-item-border-size) solid var(--ddjs-color-primary);
    }

    &.faded::before {
      border-color: var(--ddjs-color-primary-faded);
    }
  }

  .content {
    min-width: 0;

    text-decoration: none;
    color: inherit;

    article.faded & {
      color: var(--ddjs-color-2);
    }

    .now & {
      padding: utils.size(1) 0;
      color: var(--ddjs-color-primary-typo);
      font-size: 20px;
      font-weight: 600;
      line-height: 1;
      text-shadow: var(--ddjs-shadow-text);
    }

    &::before,
    &::after {
      content: '';
      position: absolute;
      left: var(--ddjs-event-list-item-border-size);
      height: calc(50% + 1px);
      width: var(--ddjs-event-list-item-border-size);
      background-color: var(--ddjs-color-primary);

      article.faded & {
        background-color: var(--ddjs-color-primary-faded);
      }
    }

    &::before {
      bottom: calc(50% + #{utils.size(1)} - 1px);

      // smooth gradient for all faded items
      article.faded:not([hidden]) & {
        background: linear-gradient(to bottom, var(--ddjs-color-primary) 0%, var(--ddjs-color-primary-faded) 100%);
      }

      // reset smooth gradient of all follow up faded items
      // to limit the transition to the first matching one
      article.faded:not([hidden]) ~ article.faded:not([hidden]) & {
        background: var(--ddjs-color-primary-faded);
      }
    }

    &::after {
      top: calc(50% + #{utils.size(1)});

      // the last item should not have a line at all
      article:last-of-type & {
        display: none;
      }

      // the last visible item (followed only by hidden items) should have a gradient
      article.last:not(.faded):not(:last-of-type) & {
        background: linear-gradient(to bottom, var(--ddjs-color-primary) 0%, transparent 100%);
      }

      article.last.faded:not(:last-of-type) & {
        background: linear-gradient(to bottom, var(--ddjs-color-primary-faded) 0%, transparent 100%);
      }
    }
  }

  .balloon {
    padding: utils.size(1);
    background-color: var(--ddjs-color-4);
    color: var(--ddjs-color-0)
  }
</style>

{
  !now ? (
    <article class:list={{ faded, first, last }} hidden={hidden}>
      <a class="content balloon" href={`${import.meta.env.BASE_URL}event/${getEventSlug(event.url!)}`}>
        <EventListItemHeader {...{ date, location }} />
        <EventListItemContent {...{ title, content: event.compiledContent() }} />
      </a>
    </article>
  ) : (
    <article class:list={{ first, last, now: true }}>
      <span class="content">
        <slot />
      </span>
    </article>
  )
}
