---
import type { MeetupEvent } from '../types';
import Search from '../components/search.component.astro';
import EventListItem from '../components/event-list-item.component.astro';

export interface Props {
  events: MeetupEvent[];
  query?: string;
}
const { events = [] } = Astro.props;
const isInPast = (date: string): boolean => +new Date(date) < +new Date();
const [upcoming, past] = events
  .sort((a, b) => b.frontmatter.date.localeCompare(a.frontmatter.date))
  .reduce(
    (acc, event) => {
      const { date } = event.frontmatter;
      if (isInPast(date)) acc[1].push(event);
      else acc[0].push(event);
      return acc;
    },
    [[], []] as [MeetupEvent[], MeetupEvent[]]
  );
---

<style lang="scss">
  @use '../styles/utils';

  :global(label):has(~ nav) {
    position: fixed;
    inset: var(--ddjs-header-height) 0 auto;
    z-index: 1;
  }

  nav {
    display: flex;
    flex-direction: column;
    gap: utils.size(2);
    padding: utils.size(4) utils.size(2) utils.size(2) utils.size(3);
    margin-top: calc(var(--ddjs-header-height) + var(--ddjs-search-height));

    :global(article:not([hidden]):first-of-type .content::before) {
      height: calc(50% + #{utils.size(100)});
    }
  }
</style>

<script>
  import { highlightMatches } from '../utils/highlight.utils';
  import { SEARCH_ATTR, doSearch, prepareQueries } from '../utils/search.utils';

  const input = document.querySelector('input[type="search"]');
  const events = document.querySelectorAll<Element>('nav[data-event-list] > article');

  // derive initial state
  events.forEach((event) => {
    event.querySelectorAll(`[${SEARCH_ATTR}]`).forEach((searchable) => {
      searchable.setAttribute(SEARCH_ATTR, searchable.innerHTML);
    });
  });

  // search
  input!.addEventListener('input', (event) => {
    const { value } = event.target as HTMLInputElement;
    const queries = prepareQueries(value);

    events.forEach((event) => {
      const result = doSearch(event, queries);

      // did we find anything?
      if (result.hasResult) {
        // show the whole element
        event.removeAttribute('hidden');
        // highlight the findings
        highlightMatches(result.combined, (text, query) => `<mark data-query="${query}">${text}</mark>`);
      } else {
        // hide the element
        event.setAttribute('hidden', '');
      }
    });
  });
</script>

<Search />
<nav data-event-list>
  {upcoming.map((event) => <EventListItem event={event} />)}
  <EventListItem now />
  {past.map((event) => <EventListItem event={event} faded />)}
</nav>
