---
import type { MarkdownInstance } from 'astro';
import Search from '../components/search.component.astro';
import EventListItem from '../components/event-list-item.component.astro';

export interface Props {
  events: MarkdownInstance<Record<string, any>>[];
  query?: string;
}
const { events = [] } = Astro.props;
const isInPast = (date: string): boolean => +new Date(date) < +new Date();
---

<style lang="scss">
  @use '../styles/utils';

  nav {
    display: flex;
    flex-direction: column;
    gap: 16px;
    padding: 16px 16px 0 24px;
  }
</style>

<script>
  const input = document.querySelector('input[type="search"]');
  const events = document.querySelectorAll('nav[data-event-list] > *');

  input!.addEventListener('input', (event) => {
    const { value: query } = event.target as HTMLInputElement;
    if (['', null].includes(query)) {
      events.forEach((event) => event.removeAttribute('hidden'));
    } else {
      // @TODO: search event titles, time[datetime], location and description
      console.log(query, events.length);
      events.forEach((event) => event.setAttribute('hidden', 'hidden'));
    }
  });
</script>

<Search />
<nav data-event-list>
  {
    events
      .sort((a, b) => b.frontmatter.date.localeCompare(a.frontmatter.date))
      .map((event) => (
        <EventListItem event={event} faded={isInPast(event.frontmatter.date)} />
      ))
  }
</nav>
